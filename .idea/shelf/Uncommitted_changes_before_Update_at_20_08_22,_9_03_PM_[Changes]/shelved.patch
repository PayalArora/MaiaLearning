Index: app/src/main/java/com/maialearning/repository/LoginRepository.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maialearning.repository\n\nimport com.google.gson.JsonArray\nimport com.google.gson.JsonObject\nimport com.maialearning.model.*\nimport com.maialearning.network.AllAPi\nimport com.maialearning.network.BaseApplication\nimport com.maialearning.network.UseCaseResult\nimport com.maialearning.util.BASE_URL\nimport com.maialearning.util.CAT_API_MSG_URL\nimport com.maialearning.util.ORIGIN\n\nimport retrofit2.HttpException\n\nimport retrofit2.Response\nimport com.maialearning.util.prefhandler.SharedHelper\nimport okhttp3.MultipartBody\nimport okhttp3.RequestBody\nimport org.json.JSONArray\nimport org.json.JSONObject\n\ninterface LoginRepository {\n    // Suspend is used to await the result from Deferred\n    suspend fun getUserLogin(username: String, password: String): UseCaseResult<LoginNewModel>\n    suspend fun getGoogleLogin(\n        email: String,\n        id: String,\n        id_token: String\n    ): UseCaseResult<LoginNewModel>\n\n    suspend fun getMicroLogin(token: String): UseCaseResult<LoginNewModel>\n    suspend fun getForgetPassword(email: String): UseCaseResult<ForgetModel>\n\n    suspend fun getUserProfile(id_token: String, id: String): UseCaseResult<ProfileResponse>\n    suspend fun getConsiderList(id: String): UseCaseResult<JsonObject>\n    suspend fun getNotes(id: String): UseCaseResult<NotesModel>\n    suspend fun getApplyList(id: String): UseCaseResult<JsonObject>\n    suspend fun getJWTToken(): UseCaseResult<String>\n    suspend fun getInbox(): UseCaseResult<JsonObject>\n    suspend fun updateSmsNotification(\n        token: String,\n        id: String,\n        ph: String,\n        code: String,\n        sms: String\n    ): UseCaseResult<String>\n\n  suspend  fun updateEmail(token: String, userData: UpdateUserData) :UseCaseResult<String>\n   suspend fun getCountries(token: String)  :UseCaseResult<JsonObject>\n    suspend fun getStates(token: String,id: String)  :UseCaseResult<JsonObject>\n    suspend fun getEthnicities(token: String,id: String)  :UseCaseResult<ArrayList<EthnicityResponseItem?>>\n    suspend fun getRaces(token: String,id: String)  :UseCaseResult<ArrayList<RaceItem?>>\n    suspend fun getImageURL(\n        token: String,\n        id: String,\n        ext: String,\n        schoolId: String\n    ): UseCaseResult<JsonArray>\n\n    suspend fun uploadImage(content:String,url: String, bode:RequestBody): UseCaseResult<Unit>\n    suspend fun getOverDueCompleted(token:String,id: String): UseCaseResult<DashboardOverdueResponse>\n    suspend fun getColFactSheet(token:String,id: String): UseCaseResult<JsonObject>\n    suspend fun getCollegeNid(token:String,id: String): UseCaseResult<JsonObject>\n    suspend fun getUniversityContact(token:String,id: String): UseCaseResult<CollegeContactModel>\n    suspend fun getUniversityNotes(token:String,id: String,id2: String): UseCaseResult<JsonObject>\n  //  suspend fun getSearchResults(search: UniversitySearch): UseCaseResult<DashboardOverdueResponse>\n\n    suspend fun updateStudentPlan(\n        updateStudentPlan: UpdateStudentPlan\n    ): UseCaseResult<JsonObject>\n\n    suspend fun searchUniversities(\n        payload: UniversitySearchPayload\n    ): UseCaseResult<JsonObject>\n\n\n    suspend fun hitLikeUniv(studentId: String, collegeId: String): UseCaseResult<JsonArray>\n    suspend fun hitUnlikeUniv(studentId: String, collegeId: String): UseCaseResult<Unit>\n}\n\nclass LoginRepositoryImpl(private val catApi: AllAPi) : LoginRepository {\n\n\n    override suspend fun getUserLogin(\n        username: String,\n        password: String\n    ): UseCaseResult<LoginNewModel> {\n        return try {\n            val result = catApi.userLoginAsync(username, password).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            println(ex.stackTrace)\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            println(ex.stackTraceToString())\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getGoogleLogin(\n        email: String,\n        id: String,\n        id_token: String\n    ): UseCaseResult<LoginNewModel> {\n        return try {\n            val result = catApi.googleLoginAsync(ORIGIN, email, id, id_token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            println(ex.stackTraceToString())\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getMicroLogin(token: String): UseCaseResult<LoginNewModel> {\n        return try {\n            val result = catApi.microLoginAsync(ORIGIN, token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            print(ex.response()?.errorBody().toString())\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            print( ex.message)\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getForgetPassword(email: String): UseCaseResult<ForgetModel> {\n        return try {\n            val result = catApi.forgetPassAsync(email, \"email\").await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getUserProfile(\n        id_token: String,\n        id: String,\n    ): UseCaseResult<ProfileResponse> {\n        return try {\n            val result = catApi.getProfile(id_token, id).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getConsiderList(id: String): UseCaseResult<JsonObject> {\n        return try {\n            val result = catApi.considerListAsync(\"Bearer \"   + SharedHelper(BaseApplication.applicationContext()).authkey,\"9375\").await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getNotes(id: String): UseCaseResult<NotesModel> {\n        return try {\n            val result = catApi.getNotes(\n                \"9375\",\n                \"Bearer \" + SharedHelper(BaseApplication.applicationContext()).authkey\n            ).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getApplyList(id: String): UseCaseResult<JsonObject> {\n        return try {\n            val result = catApi.applyListAsync(\n                \"9375\",\n                \"Bearer \" + SharedHelper(BaseApplication.applicationContext()).authkey\n            ).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun updateSmsNotification(\n        token: String,\n        id: String,\n        ph: String,\n        code: String,\n        sms: String\n    ): UseCaseResult<String> {\n        return try {\n            val result = catApi.updateSMSSetting(token, id, ph, code, sms).await()\n            UseCaseResult.Success(result.toString())\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun updateEmail(token: String, updateUserData:UpdateUserData): UseCaseResult<String> {\n        return try {\n            val result = catApi.updateEmail(token, updateUserData).await()\n            UseCaseResult.Success(result.toString())\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getCountries(token: String): UseCaseResult<JsonObject> {\n        return try {\n            val result = catApi.getCountries(token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getStates(token: String, id: String): UseCaseResult<JsonObject> {\n        return try {\n            val result = catApi.getStates(id, token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getEthnicities(\n        token: String,\n        id: String\n    ): UseCaseResult<ArrayList<EthnicityResponseItem?>> {\n        return try {\n            val result = catApi.getEthnicities(id, token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getRaces(token: String, id: String): UseCaseResult<ArrayList<RaceItem?>> {\n        return try {\n            val result = catApi.getRaces(id,token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getImageURL(\n        token: String,\n        id: String,\n        ext: String,\n        schoolId: String\n    ): UseCaseResult<JsonArray> {\n        return try {\n            val result = catApi.updateProfImage(token, id, ext, schoolId).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun uploadImage(content:String,url: String, bode: RequestBody): UseCaseResult<Unit> {\n        return try {\n            val result = catApi.uploadImage(url,content, bode).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getJWTToken(): UseCaseResult<String> {\n        return try {\n            val result =\n                catApi.getJWTToken(\"Bearer \" + SharedHelper(BaseApplication.applicationContext()).authkey)\n                    .await()\n            UseCaseResult.Success(result.get(0).toString().replace(\"\\\"\", \"\"))\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun getInbox(): UseCaseResult<JsonObject> {\n        return try {\n            BASE_URL=CAT_API_MSG_URL\n//            val result = catApi.getInboxN(\n//                CAT_API_MSG_URL + \"${SharedHelper(BaseApplication.applicationContext()).messageId}/inbox\",\n//                \"Bearer \" +SharedHelper(BaseApplication.applicationContext()).jwtToken\n//            ).await()\n            val result = catApi.getInboxN(\n                CAT_API_MSG_URL + \"96c607b0-9a6c-4928-bd8c-8f332525fbe7/inbox\",\n                \"Bearer \" +SharedHelper(BaseApplication.applicationContext()).jwtToken\n            ).await()\n//            val result = catApi.getInbox(\n//                SharedHelper(BaseApplication.applicationContext()).jwtToken,\n//                 SharedHelper(BaseApplication.applicationContext()).messageId\n//            ).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n\n    override suspend fun getOverDueCompleted(token: String, id: String): UseCaseResult<DashboardOverdueResponse> {\n        return try {\n            val result = catApi.getOverDueCompleted(id,token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n    override suspend fun getCollegeNid(token: String, id: String): UseCaseResult<JsonObject> {\n        return try {\n            val result = catApi.getCollegeNid(id,token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n    override suspend fun getColFactSheet(token: String, id: String): UseCaseResult<JsonObject> {\n        return try {\n            val url=\"https://maia2-staging.maialearning.com/v2/atlas-static-data/college-factsheet/222178.json\"\n            val result = catApi.getColFactSheet(url).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n    override suspend fun getUniversityContact(token: String, id: String): UseCaseResult<CollegeContactModel> {\n        return try {\n            val result = catApi.universityContacts(id,token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n    override suspend fun getUniversityNotes(token: String, id: String,id2 :String): UseCaseResult<JsonObject> {\n        return try {\n            val result = catApi.universityNotes(id,id2,token).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun updateStudentPlan(\n        updateStudentPlan: UpdateStudentPlan\n    ): UseCaseResult<JsonObject> {\n        return try {\n            val result = catApi.editStudentPlan(\n                \"Bearer \" + SharedHelper(BaseApplication.applicationContext()).authkey,\n                updateStudentPlan\n            ).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun searchUniversities(payload: UniversitySearchPayload): UseCaseResult<JsonObject> {\n        return try {\n            val result = catApi.searchUniversties(\n                \"Bearer \" + SharedHelper(BaseApplication.applicationContext()).authkey,\n                payload\n            ).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun hitLikeUniv(\n        studentId: String,\n        collegeId: String\n    ): UseCaseResult<JsonArray> {\n        return try {\n            val result = catApi.hitLikeUniversity(\n                \"Bearer \" + SharedHelper(BaseApplication.applicationContext()).authkey,\n                studentId, collegeId, \"\"\n            ).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n    override suspend fun hitUnlikeUniv(\n        studentId: String,\n        collegeId: String\n    ): UseCaseResult<Unit> {\n        return try {\n            val result = catApi.hitUnlikeUniversity(\n                collegeId, studentId,\n                \"Bearer \" + SharedHelper(BaseApplication.applicationContext()).authkey,\n            ).await()\n            UseCaseResult.Success(result)\n        } catch (ex: HttpException) {\n            UseCaseResult.Error(ex)\n        } catch (ex: Exception) {\n            UseCaseResult.Exception(ex)\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maialearning/repository/LoginRepository.kt b/app/src/main/java/com/maialearning/repository/LoginRepository.kt
--- a/app/src/main/java/com/maialearning/repository/LoginRepository.kt	
+++ b/app/src/main/java/com/maialearning/repository/LoginRepository.kt	
@@ -63,6 +63,7 @@
     suspend fun getCollegeNid(token:String,id: String): UseCaseResult<JsonObject>
     suspend fun getUniversityContact(token:String,id: String): UseCaseResult<CollegeContactModel>
     suspend fun getUniversityNotes(token:String,id: String,id2: String): UseCaseResult<JsonObject>
+    suspend fun getUniversityList(token: String, url: String): UseCaseResult<JsonArray>
   //  suspend fun getSearchResults(search: UniversitySearch): UseCaseResult<DashboardOverdueResponse>
 
     suspend fun updateStudentPlan(
@@ -380,6 +381,16 @@
             UseCaseResult.Exception(ex)
         }
     }
+    override suspend fun getUniversityList(token: String, url: String): UseCaseResult<JsonArray> {
+        return try {
+            val result = catApi.getUniversityList(url,token).await()
+            UseCaseResult.Success(result)
+        } catch (ex: HttpException) {
+            UseCaseResult.Error(ex)
+        } catch (ex: Exception) {
+            UseCaseResult.Exception(ex)
+        }
+    }
 
     override suspend fun updateStudentPlan(
         updateStudentPlan: UpdateStudentPlan
Index: app/src/main/java/com/maialearning/network/AllAPi.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maialearning.network\n\nimport com.google.gson.JsonArray\nimport com.google.gson.JsonObject\nimport com.maialearning.model.*\nimport kotlinx.coroutines.Deferred\nimport okhttp3.RequestBody\nimport retrofit2.http.*\n\n\ninterface AllAPi {\n\n    @POST(\"user/sign-in\")\n    @FormUrlEncoded\n    fun userLoginAsync(\n        @Field(\"username\") username: String,\n        @Field(\"password\") password: String\n    ): Deferred<LoginNewModel>\n\n\n    @POST(\"google_login\")\n    @FormUrlEncoded\n    fun googleLoginAsync(\n        @Header(\"origin\") origin: String,\n        @Field(\"email\") email: String,\n        @Field(\"id\") id: String,\n        @Field(\"id_token\") id_token: String\n    ): Deferred<LoginNewModel>\n\n    @POST(\"azure_ad_oauth_login\")\n    @FormUrlEncoded\n    fun microLoginAsync(\n        @Header(\"origin\") origin: String,\n        @Field(\"token\") token: String\n    ): Deferred<LoginNewModel>\n\n    @GET(\"user_my_account_info/{id}\")\n    fun getProfile(\n        @Header(\"Authorization\") Authorization: String,\n        @Path(\"id\") id: String\n    ): Deferred<ProfileResponse>\n\n    @POST(\"forgot_password\")\n    @FormUrlEncoded\n    fun forgetPassAsync(\n        @Field(\"email\") email: String,\n        @Field(\"type\") type: String\n    ): Deferred<ForgetModel>\n\n//    @GET(\"counselor_college/{id}?status={status}\")\n//    fun considerListAsync(\n//        @Path(\"id\")  id:String,\n//        @Header(\"status\") status: String\n//    ):  Deferred<JSONObject>\n\n    @GET(\"counselor_college/{id}?status=considering\")\n    fun considerListAsync(\n        @Header(\"Authorization\") AutToken: String,\n        @Path(\"id\") id: String\n    ): Deferred<JsonObject>\n\n    @GET(\"counselor_college/{id}?status=applying\")\n    fun applyListAsync(\n        @Path(\"id\") id: String,\n        @Header(\"Authorization\") AutToken: String\n    ): Deferred<JsonObject>\n\n    @GET(\"get_notes_for_student/{id}\")\n    fun getNotes(\n        @Path(\"id\") id: String,\n        @Header(\"Authorization\") AutToken: String\n    ): Deferred<NotesModel>\n\n    @POST(\"edit-phone-values\")\n    @FormUrlEncoded\n    fun updateSMSSetting(\n        @Header(\"Authorization\") AutToken: String,\n        @Field(\"nid\") n_id: String,\n        @Field(\"phone_number\") phone_no: String,\n        @Field(\"phone_country_code\") country_code: String,\n        @Field(\"sms_enable\") sms: String\n    ): Deferred<JsonArray>\n\n    @POST(\"user_my_account_info\")\n    fun updateEmail(\n        @Header(\"Authorization\") AutToken: String,\n        @Body updateUserData: UpdateUserData\n    ): Deferred<JsonArray>\n\n    @GET(\"get_country_list\")\n    fun getCountries(\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<JsonObject>\n\n    @GET(\"get-state-list-country/{id}\")\n    fun getStates(\n        @Path(\"id\") id: String,\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<JsonObject>\n\n    @GET(\"get_jwt_token\")\n    fun getJWTToken(\n        @Header(\"Authorization\") AutToken: String\n    ): Deferred<JsonArray>\n\n//    @GET(\"{id}/inbox\")\n//    fun getInbox(\n//        @Header(\"x-access-token\")  JwtToken:String,\n//        @Path(\"id\")  id:String,\n//    ):  Deferred<InboxResponse>\n\n    @GET\n    fun getInboxN(\n        @Url url: String,\n        @Header(\"x-access-token\") JwtToken: String,\n    ): Deferred<JsonObject>\n\n    @GET(\"{id}/inbox\")\n    fun getInbox(\n        @Header(\"x-access-token\") AutToken: String,\n        @Path(\"id\") id: String\n    ): Deferred<JsonObject>\n\n\n    @GET(\"school_wide_configuration/field_ethnicity_config/{id}\")\n    fun getEthnicities(\n        @Path(\"id\") id: String,\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<ArrayList<EthnicityResponseItem?>>\n\n    @GET(\"school_wide_configuration/field_race_config/{id}\")\n    fun getRaces(\n        @Path(\"id\") id: String,\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<ArrayList<RaceItem?>>\n\n    @POST(\"get_profile_picure_update_presigned_url\")\n    @FormUrlEncoded\n    fun updateProfImage(\n        @Header(\"Authorization\") AutToken: String,\n        @Field(\"uid\") n_id: String,\n        @Field(\"ext\") ext: String,\n        @Field(\"school_id\") schoolId: String\n    ): Deferred<JsonArray>\n\n    @PUT\n    fun uploadImage(\n        @Url() url: String,\n        @Header(\"Content-Type\") content: String,\n        @Body body: RequestBody\n    ): Deferred<Unit>\n\n    @GET(\"student-assignment-dashboard/{id}\")\n    fun getOverDueCompleted(\n        @Path(\"id\") id: String,\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<DashboardOverdueResponse>\n\n    @GET\n    fun getColFactSheet(\n        @Url() url: String,\n\n    ): Deferred<JsonObject>\n\n    @GET(\"college_nid_by_unitid/{id}\")\n    fun getCollegeNid(\n        @Path(\"id\") id: String,\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<JsonObject>\n\n    @GET(\"university-contact-student/{id}\")\n    fun universityContacts(\n        @Path(\"id\") id: String,\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<CollegeContactModel>\n\n    @GET(\"counselor_college_notes/{id}/{cid}\")\n    fun universityNotes(\n        @Path(\"id\") id: String,\n        @Path(\"cid\") cid: String,\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<JsonObject>\n\n\n    @POST(\"edit_student_plan_college_application\")\n    fun editStudentPlan(\n        @Header(\"Authorization\") Authorization: String,\n        @Body updateStudentPlan: UpdateStudentPlan\n    ): Deferred<JsonObject>\n\n    @POST(\"un_aws_cloud_search\")\n    fun searchUniversties(\n        @Header(\"Authorization\") Authorization: String,\n        @Body payload: UniversitySearchPayload\n    ): Deferred<JsonObject>\n\n    @POST(\"top-picks\")\n    @FormUrlEncoded\n    fun hitLikeUniversity(\n        @Header(\"Authorization\") Authorization: String,\n        @Field(\"student_id\") schoolId: String,\n        @Field(\"college_id\") collegeId: String,\n        @Field(\"applying_flag\") ext: String\n    ): Deferred<JsonArray>\n\n    @DELETE(\"top-picks/{schoolId}/{studentId}\")\n    fun hitUnlikeUniversity(\n        @Path(\"schoolId\") schoolId: String,\n        @Path(\"studentId\") studentId: String,\n        @Header(\"Authorization\") Authorization: String\n    ): Deferred<Unit>\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maialearning/network/AllAPi.kt b/app/src/main/java/com/maialearning/network/AllAPi.kt
--- a/app/src/main/java/com/maialearning/network/AllAPi.kt	
+++ b/app/src/main/java/com/maialearning/network/AllAPi.kt	
@@ -209,4 +209,10 @@
         @Path("studentId") studentId: String,
         @Header("Authorization") Authorization: String
     ): Deferred<Unit>
+
+    @GET
+    fun getUniversityList(
+        @Url url: String,
+        @Header("Authorization") JwtToken: String,
+    ): Deferred<JsonArray>
 }
\ No newline at end of file
Index: app/src/main/java/com/maialearning/viewmodel/FactSheetModel.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maialearning.viewmodel\n\nimport androidx.lifecycle.MutableLiveData\nimport androidx.lifecycle.ViewModel\nimport com.google.gson.JsonObject\nimport com.maialearning.model.CollegeContactModel\nimport com.maialearning.model.CollegeFactSheetModel\nimport com.maialearning.network.UseCaseResult\nimport com.maialearning.repository.LoginRepository\nimport com.maialearning.util.Coroutines\nimport com.maialearning.util.prefhandler.SharedHelper\nimport kotlinx.coroutines.CoroutineScope\nimport kotlinx.coroutines.Dispatchers\nimport kotlinx.coroutines.Job\nimport kotlinx.coroutines.withContext\nimport kotlin.coroutines.CoroutineContext\n\nclass FactSheetModel (private val catRepository: LoginRepository) : ViewModel(), CoroutineScope {\n    // Coroutine's background job\n    private val job = Job()\n\n    // Define default thread for Coroutine as Main and add job\n    override val coroutineContext: CoroutineContext = Dispatchers.Main + job\n\n    val showLoading = MutableLiveData<Boolean>()\n    val idObserver = MutableLiveData<JsonObject>()\n    val contactInfoObserver = MutableLiveData<CollegeContactModel>()\n    val noteObserver = MutableLiveData<JsonObject>()\n    val factSheetObserver = MutableLiveData<JsonObject>()\n    val showError = SingleLiveEvent<String>()\n\n    fun getColFactSheet(token:String,id:String) {\n        showLoading.value = true\n        Coroutines.mainWorker {\n            val result = withContext(Dispatchers.Main) {\n                catRepository.getColFactSheet(token,id)\n            }\n            // showLoading.value = false\n            when (result) {\n                is UseCaseResult.Success -> factSheetObserver.value = result.data\n                is UseCaseResult.Error -> {\n                    showLoading.value = false\n                    showError.value = result.exception.response()?.errorBody()?.string()\n                }\n                is UseCaseResult.Exception -> {\n                    showLoading.value = false\n                    showError.value = result.exception.message}\n\n            }\n        }\n    }\n    fun getCollegeNid(token:String,id:String) {\n        showLoading.value = true\n        Coroutines.mainWorker {\n            val result = withContext(Dispatchers.Main) {\n                catRepository.getCollegeNid(token,id)\n            }\n            // showLoading.value = false\n            when (result) {\n                is UseCaseResult.Success -> idObserver.value = result.data\n                is UseCaseResult.Error -> {\n                    showLoading.value = false\n                    showError.value = result.exception.response()?.errorBody()?.string()\n                }\n                is UseCaseResult.Exception -> {\n                    showLoading.value = false\n                    showError.value = result.exception.message}\n\n            }\n        }\n    }\n\n    fun getUniversityContact(token:String,id:String) {\n        showLoading.value = true\n        Coroutines.mainWorker {\n            val result = withContext(Dispatchers.Main) {\n                catRepository.getUniversityContact(token,id)\n            }\n            // showLoading.value = false\n            when (result) {\n                is UseCaseResult.Success -> contactInfoObserver.value = result.data\n                is UseCaseResult.Error -> {\n                    showLoading.value = false\n                    showError.value = result.exception.response()?.errorBody()?.string()\n                }\n                is UseCaseResult.Exception -> {\n                    showLoading.value = false\n                    showError.value = result.exception.message}\n\n            }\n        }\n    }\n    fun getUniversityNotes(token:String,id:String,id2:String) {\n        showLoading.value = true\n        Coroutines.mainWorker {\n            val result = withContext(Dispatchers.Main) {\n                catRepository.getUniversityNotes(token,id,id2)\n            }\n            // showLoading.value = false\n            when (result) {\n                is UseCaseResult.Success -> noteObserver.value = result.data\n                is UseCaseResult.Error -> {\n                    showLoading.value = false\n                    showError.value = result.exception.response()?.errorBody()?.string()\n                }\n                is UseCaseResult.Exception -> {\n                    showLoading.value = false\n                    showError.value = result.exception.message}\n\n            }\n        }\n    }\n    override fun onCleared() {\n        super.onCleared()\n        // Clear our job when the linked activity is destroyed to avoid memory leaks\n        job.cancel()\n    }\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maialearning/viewmodel/FactSheetModel.kt b/app/src/main/java/com/maialearning/viewmodel/FactSheetModel.kt
--- a/app/src/main/java/com/maialearning/viewmodel/FactSheetModel.kt	
+++ b/app/src/main/java/com/maialearning/viewmodel/FactSheetModel.kt	
@@ -2,6 +2,7 @@
 
 import androidx.lifecycle.MutableLiveData
 import androidx.lifecycle.ViewModel
+import com.google.gson.JsonArray
 import com.google.gson.JsonObject
 import com.maialearning.model.CollegeContactModel
 import com.maialearning.model.CollegeFactSheetModel
@@ -26,6 +27,7 @@
     val idObserver = MutableLiveData<JsonObject>()
     val contactInfoObserver = MutableLiveData<CollegeContactModel>()
     val noteObserver = MutableLiveData<JsonObject>()
+    val listObserver = MutableLiveData<JsonArray>()
     val factSheetObserver = MutableLiveData<JsonObject>()
     val showError = SingleLiveEvent<String>()
 
@@ -106,6 +108,27 @@
                 is UseCaseResult.Exception -> {
                     showLoading.value = false
                     showError.value = result.exception.message}
+
+            }
+        }
+    }
+
+    fun getUniversityList(token:String) {
+        showLoading.value = true
+        Coroutines.mainWorker {
+            val result = withContext(Dispatchers.Main) {
+                catRepository.getUniversityList(token,"https://maia2-staging-backend.maialearning.com/ajs-services/university-list?status=1&uid=9375")
+            }
+            // showLoading.value = false
+            when (result) {
+                is UseCaseResult.Success -> listObserver.value = result.data
+                is UseCaseResult.Error -> {
+                    showLoading.value = false
+                    showError.value = result.exception.response()?.errorBody()?.string()
+                }
+                is UseCaseResult.Exception -> {
+                    showLoading.value = false
+                    showError.value = result.exception.message}
 
             }
         }
