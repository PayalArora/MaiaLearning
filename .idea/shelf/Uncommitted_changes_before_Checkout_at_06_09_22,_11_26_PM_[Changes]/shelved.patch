Index: app/src/main/java/com/maialearning/ui/fragments/ConsideringFragment.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.maialearning.ui.fragments\n\nimport android.app.AlertDialog\nimport android.app.Dialog\nimport android.content.res.Resources\nimport android.os.Build\nimport android.os.Bundle\nimport android.view.LayoutInflater\nimport android.view.MenuItem\nimport android.view.View\nimport android.view.ViewGroup\nimport android.widget.*\nimport androidx.fragment.app.Fragment\nimport com.google.android.material.bottomsheet.BottomSheetDialog\nimport com.google.gson.JsonArray\nimport com.google.gson.JsonObject\nimport com.maialearning.R\nimport com.maialearning.calbacks.OnItemClick\nimport com.maialearning.databinding.*\nimport com.maialearning.model.AddProgramConsider\nimport com.maialearning.model.ConsiderModel\nimport com.maialearning.model.UpdateStudentPlan\nimport com.maialearning.ui.adapter.CitizenshipAdapter\nimport com.maialearning.ui.adapter.CommentAdapter\nimport com.maialearning.ui.adapter.ConsiderAdapter\nimport com.maialearning.ui.adapter.ProgramAdapter\nimport com.maialearning.ui.bottomsheets.UpcomingItemDetails\nimport com.maialearning.util.prefhandler.SharedHelper\nimport com.maialearning.util.showLoadingDialog\nimport com.maialearning.viewmodel.HomeViewModel\nimport org.json.JSONArray\nimport org.json.JSONObject\nimport org.koin.androidx.viewmodel.ext.android.viewModel\nimport java.util.*\nimport kotlin.collections.ArrayList\n\nconst val type: String = \"UCAS\"\nconst val term = \"Spring 2022\"\nconst val plan = \"Early Action\"\n\nclass ConsideringFragment : Fragment(), OnItemClickOption, OnItemClick {\n    var count: Int = 0\n    var dialog: BottomSheetDialog? = null\n    var notesDialog: BottomSheetDialog? = null\n    private lateinit var dialogP: Dialog\n    private lateinit var mBinding: ConsideringLayoutBinding\n    private val homeModel: HomeViewModel by viewModel()\n    lateinit var userid: String\n    val finalArray: ArrayList<ConsiderModel.Data> = ArrayList()\n\n    override fun onCreate(savedInstanceState: Bundle?) {\n        super.onCreate(savedInstanceState)\n\n    }\n\n    override fun onCreateView(\n        inflater: LayoutInflater, container: ViewGroup?,\n        savedInstanceState: Bundle?,\n    ): View? {\n        // Inflate the layout for this fragment\n        mBinding = ConsideringLayoutBinding.inflate(inflater, container, false)\n\n        return mBinding.root\n    }\n\n    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {\n        super.onViewCreated(view, savedInstanceState)\n        setListeners()\n        init()\n//        setAdapter()\n    }\n\n    private fun init() {\n        dialogP = showLoadingDialog(requireContext())\n        initObserver()\n        dialogP.show()\n        getConsideringList()\n\n    }\n\n    private fun getConsideringList() {\n        SharedHelper(requireContext()).id?.let {\n            userid = SharedHelper(requireContext()).id!!\n            homeModel.getConsiderList(userid)\n        }\n    }\n\n    private fun initObserver() {\n        homeModel.listObserver.observe(requireActivity()) {\n            it?.let {\n                dialogP?.dismiss()\n                finalArray.clear()\n                if (JSONObject(it.toString()).getJSONObject(userid).has(\"data\")) {\n                    val json =JSONObject(it.toString()).getJSONObject(userid).getJSONObject(\"data\")\n                    val x = json.keys() as Iterator<String>\n                    val jsonArray = JSONArray()\n                    while (x.hasNext()) {\n                        val key: String = x.next().toString()\n                        jsonArray.put(json.get(key))\n                    }\n                    val countries = ArrayList<String>()\n                    val array: ArrayList<ConsiderModel.Data> = ArrayList()\n                    for (i in 0 until jsonArray.length()) {\n                        val object_ = jsonArray.getJSONObject(i)\n                        val arrayProgram: ArrayList<ConsiderModel.ProgramData> = arrayListOf()\n                        var arrayCounselor: ArrayList<ConsiderModel.CounselorNotes> =\n                            arrayListOf()\n                        var programArray = object_.getJSONArray(\"app_by_program_data\")\n                        for (j in 0 until programArray.length()) {\n                            val objectProgram = programArray.getJSONObject(j)\n                            arrayProgram.add(\n                                ConsiderModel.ProgramData(\n                                    objectProgram.getInt(\"program_id\"),\n                                    objectProgram.getString(\"program_name\"),\n                                    \"\",\n                                    \"\"\n                                )\n                            )\n                        }\n\n                        /*      var counselorNotes = object_.getJSONArray(\"counselor_notes\")\n                          if (counselorNotes !is JSONArray && counselorNotes.length() != 0) {\n                              if (counselorNotes is JSONObject) {\n                                  val x = counselorNotes.keys() as Iterator<String>\n                                  while (x.hasNext()) {\n                                      var json: JSONObject = counselorNotes.get(x.next()) as JSONObject\n                                      val notesObj: ConsiderModel.CounselorNotes =\n                                          ConsiderModel.CounselorNotes(json.optString(\"id\"),\n                                              json.optString(\"uid\"),\n                                              json.optString(\"counselor_note\"),\n                                              json.optString(\"first_name\"),\n                                              json.optString(\"last_name\"))\n                                      arrayCounselor.add(notesObj)\n                                  }\n\n\n                              }\n                          }*/\n\n                        if (!countries.contains(object_.getString(\"country_name\")))\n                            countries.add(object_.getString(\"country_name\"))\n                        val model: ConsiderModel.Data = ConsiderModel.Data(\n                            object_.getInt(\"contact_info\"),\n                            object_.getInt(\"parchment\"),\n                            object_.getInt(\"slate\"),\n                            object_.getInt(\"transcript_nid\"),\n                            object_.getString(\"university_nid\"),\n                            object_.getString(\"name\"),\n                            object_.getString(\"country\"),\n                            object_.getString(\"country_name\"),\n                            object_.getString(\"created_by_name\"),\n                            object_.getString(\"created_date\"),\n                            object_.getString(\"college_priority_choice\"),\n                            object_.getString(\"university_nid\"),\n                            object_.getString(\"unitid\"),\n                            object_.getString(\"internal_deadline\"),\n                            arrayProgram,\n                            0,\n                            object_.getString(\"notes\"),\n                            arrayCounselor\n                        )\n                        array.add(model)\n                        array.sortBy { it.naviance_college_name }\n                    }\n\n                    var pos = 0\n                    // Sorted countries by name\n                    countries.sortBy { it }\n                    for (j in 0 until countries.size) {\n                        var firstTime = true\n                        var count = 0\n                        for (k in 0 until array.size) {\n                            if (countries[j] == array[k].country_name) {\n                                count += 1\n                                if (firstTime) {\n                                    firstTime = false\n                                    array[k].country_name = countries[j]\n                                } else {\n                                    array[k].country_name = \"\"\n                                }\n                                finalArray.add(array[k])\n                                finalArray[pos].count = count\n                            }\n                        }\n                        pos = finalArray.size\n                    }\n\n                    mBinding.universitisCounte.text = array.size.toString() + \" Universities\"\n                    mBinding.consideringList.adapter =\n                        ConsiderAdapter(this, finalArray, ::notesClick)\n                }\n            }\n        }\n\n    }\n\n    private fun notesClick(data: ConsiderModel.Data) {\n//        val sheetBinding: ConsideringNotesBottomsheetBinding =\n//            ConsideringNotesBottomsheetBinding.inflate(layoutInflater)\n//        notesDialog = BottomSheetDialog(requireContext())\n//        notesDialog?.setContentView(sheetBinding.root)\n//        sheetBinding.backBtn.setOnClickListener { notesDialog?.dismiss() }\n//        notesDialog?.show()\n//        sheetBinding.apply {\n//            //notesAddedby.setText(data.c)\n//        }\n\n    }\n\n    private fun setAdapter() {\n        mBinding.consideringList.adapter = ConsiderAdapter(this, arrayListOf(), ::notesClick)\n    }\n\n\n    private fun setListeners() {\n\n    }\n\n    override fun onDestroyView() {\n        dialog?.dismiss()\n        super.onDestroyView()\n    }\n\n\n    private fun bottomSheetType(layoutId: Int, rbId: Int, type: Int) {\n        dialog = BottomSheetDialog(requireContext())\n\n        val view = layoutInflater.inflate(layoutId, null)\n        view.minimumHeight = ((Resources.getSystem().displayMetrics.heightPixels))\n        val radioAppType = view.findViewById<RadioGroup>(rbId)\n        dialog?.setContentView(view)\n        dialog?.show()\n        view.findViewById<RelativeLayout>(R.id.close).setOnClickListener {\n            dialog?.dismiss()\n        }\n        radioAppType.setOnCheckedChangeListener { group, checkedId ->\n            val radioButton = radioAppType.findViewById(checkedId) as RadioButton\n            (mBinding.consideringList.adapter as ConsiderAdapter).setValue(\n                radioButton.text.toString(),\n                type\n            )\n        }\n    }\n\n    override fun onTypeClick() {\n        bottomSheetType(R.layout.application_type, R.id.radio_app_type, 1)\n    }\n\n    override fun onTermClick() {\n        bottomSheetType(R.layout.application_term, R.id.radio_app_term, 0)\n    }\n\n    override fun onPlanClick() {\n        bottomSheetType(R.layout.application_plan_filter, R.id.radio_action, 2)\n    }\n\n    override fun onCommentClick() {\n        bottomSheetComment()\n    }\n\n    override fun onAddClick(position: Int) {\n        bottomSheetProgram(position)\n    }\n\n    override fun onInfoClick(postion: Int) {\n        bottonSheetInfo(postion)\n    }\n\n    override fun onApplyingClick(postion: Int) {\n        SharedHelper(requireContext()).id?.let {\n            dialogP.show()\n            homeModel.moveToApplying(\n                it,\n                finalArray.get(postion).university_nid,\n                \"1\"\n            )\n        }\n        homeModel.applyingObserver.observe(requireActivity()) {\n//            finalArray.removeAt(postion)\n//            if (finalArray.get(postion).count != 0)\n//                finalArray.get(postion).count = finalArray.get(postion).count - 1\n//            mBinding.consideringList.adapter?.notifyDataSetChanged()\n//            mBinding.universitisCounte.text = finalArray.size.toString() + \" Universities\"\n            dialogP.dismiss()\n            getConsideringList()\n        }\n    }\n\n    private fun bottonSheetInfo(postion: Int) {\n        val dialog = BottomSheetDialog(requireContext())\n        val sheetBinding: ConsideringInfoSheetBinding =\n            ConsideringInfoSheetBinding.inflate(layoutInflater)\n        sheetBinding.root.minimumHeight = ((Resources.getSystem().displayMetrics.heightPixels))\n        dialog.setContentView(sheetBinding.root)\n        dialog.show()\n        sheetBinding.close.setOnClickListener {\n            dialog.dismiss()\n        }\n        sheetBinding.saveBtn.setOnClickListener {\n            var updateStudentPlan = UpdateStudentPlan()\n            updateStudentPlan.student_uid = SharedHelper(requireContext()).id.toString()\n            updateStudentPlan.college_nid = finalArray[postion].university_nid\n            updateStudentPlan.school_within_university =\n                sheetBinding.schoolWithinUniv.text.toString()\n            updateStudentPlan.app_type = \"4\"\n            updateStudentPlan.request_transcript = \"0\"\n            if (sheetBinding.rateSpinner.selectedItemPosition != 0) {\n                updateStudentPlan.college_interest =\n                    sheetBinding.rateSpinner.selectedItemPosition.toString()\n            }\n            if (sheetBinding.interviewSpinner.selectedItemPosition != 0) {\n                updateStudentPlan.interview_interest =\n                    sheetBinding.interviewSpinner.selectedItemPosition.toString()\n            }\n\n            if (sheetBinding.yesRadio.isChecked) {\n                updateStudentPlan.campus_tour = \"1\"\n            } else {\n                updateStudentPlan.campus_tour = \"0\"\n            }\n\n              dialogP.show()\n            homeModel.updateStudentPlan(updateStudentPlan)\n            homeModel.updateStudentPlanObserver.observe(requireActivity()) {\n                dialog.dismiss()\n                dialogP.dismiss()\n            }\n            homeModel.showError.observe(requireActivity()) {\n                dialogP.dismiss()\n            }\n        }\n    }\n\n\n    private fun bottomSheetComment() {\n        val dialog = BottomSheetDialog(requireContext())\n        val sheetBinding: CommentsSheetBinding = CommentsSheetBinding.inflate(layoutInflater)\n        sheetBinding.root.minimumHeight = ((Resources.getSystem().displayMetrics.heightPixels))\n        dialog.setContentView(sheetBinding.root)\n        dialog.show()\n        sheetBinding.close.setOnClickListener {\n            dialog.dismiss()\n        }\n        sheetBinding.commentList.adapter = CommentAdapter(this)\n\n    }\n\n    override fun onDestroy() {\n        super.onDestroy()\n\n    }\n\n    private fun bottomSheetProgram(postion: Int) {\n        val dialog = BottomSheetDialog(requireContext())\n        val sheetBinding: LayoutProgramsBinding = LayoutProgramsBinding.inflate(layoutInflater)\n        sheetBinding.root.minimumHeight = ((Resources.getSystem().displayMetrics.heightPixels))\n        dialog.setContentView(sheetBinding.root)\n        dialog.show()\n        var addedPrograms: ArrayList<AddProgramConsider.Programs?>? = ArrayList()\n        for (i in finalArray[postion].program_data?.indices!!) {\n            var programData: AddProgramConsider.Programs = AddProgramConsider.Programs()\n            programData.program_name =\n                finalArray[postion].program_data?.get(i)?.program_name.toString()\n            programData.program_id = finalArray[postion].program_data?.get(i)?.program_id\n            addedPrograms?.add(programData)\n        }\n        var deletedPrograms: ArrayList<String> = ArrayList()\n        sheetBinding.addMoreLayout.adapter = ProgramAdapter(addedPrograms, deletedPrograms, this)\n        sheetBinding.addMore.setOnClickListener {\n            ((sheetBinding.addMoreLayout.adapter) as ProgramAdapter).addMore()\n        }\n        sheetBinding.save.setOnClickListener {\n\n            addedPrograms = ((sheetBinding.addMoreLayout.adapter) as ProgramAdapter).save()\n            dialogP.show()\n//            var newPrograms: ArrayList<AddProgramConsider.Programs?>? = ArrayList()\n//\n//            for (i in addedPrograms!!.indices) {\n//                var programData: AddProgramConsider.Programs = AddProgramConsider.Programs()\n//                programData.program_name = addedPrograms.get(i).toString()\n//                newPrograms?.add(programData)\n//            }\n            if (deletedPrograms.size > 0) {\n                for (i in deletedPrograms.indices) {\n                    homeModel.deleteMlProgram(deletedPrograms.get(i))\n                }\n            }\n\n            var newPrograms: ArrayList<AddProgramConsider.Programs?> = ArrayList()\n\n            if (addedPrograms != null) {\n                for (i in addedPrograms!!.indices) {\n                    if ((addedPrograms!![i]?.program_name ?: \"\").isEmpty()) {\n                        newPrograms.add(addedPrograms!![i])\n                    }\n                }\n                addedPrograms!!.removeAll(newPrograms)\n            }\n\n            var addProgramConsider = AddProgramConsider()\n            addProgramConsider.trans_req_nid = finalArray[postion].transcriptNid.toString()\n            addProgramConsider.program_data = addedPrograms\n            homeModel.addProgramToConsidering(addProgramConsider)\n\n            homeModel.addProgramObserver.observe(requireActivity()) {\n                dialog.dismiss()\n                getConsideringList()\n            }\n        }\n\n    }\n\n    override fun onMenuClick(postion: Int, it: View?) {\n        menuPopUp(postion, it)\n    }\n\n    private fun menuPopUp(position: Int, it: View?) {\n\n        val popupMenu = PopupMenu(requireContext(), it)\n        popupMenu.inflate(R.menu.consider_popup)\n        popupMenu.show()\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {\n            popupMenu.setForceShowIcon(true)\n        };\n\n        popupMenu.setOnMenuItemClickListener(PopupMenu.OnMenuItemClickListener { item: MenuItem? ->\n\n            when (item!!.itemId) {\n                R.id.del_coll -> {\n                    confirmPopup(position)\n                }\n            }\n\n            true\n\n        })\n    }\n\n    private fun confirmPopup(position: Int) {\n        AlertDialog.Builder(requireContext())\n            .setIcon(android.R.drawable.ic_dialog_alert)\n            .setMessage(\"Are you sure you want to delete college?\")\n            .setPositiveButton(\n                \"Yes\"\n            ) { dialog, _ -> deleteWork(position) }\n            .setNegativeButton(\"No\", null)\n            .show()\n    }\n\n    private fun deleteWork(position: Int) {\n        SharedHelper(requireContext()).id?.let {\n            dialogP.show()\n            homeModel.hidel(\n                it,\n                finalArray.get(position).university_nid\n            )\n        }\n        homeModel.delObserver.observe(requireActivity()) {\n            getConsideringList()\n        }\n    }\n\n    override fun onClick(positiion: Int) {\n\n    }\n\n}\n\n\ninterface OnItemClickOption {\n    fun onTypeClick()\n    fun onTermClick()\n    fun onPlanClick()\n    fun onCommentClick()\n    fun onAddClick(postion: Int)\n    fun onInfoClick(postion: Int)\n    fun onApplyingClick(postion: Int)\n    fun onMenuClick(postion: Int, it: View?)\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/maialearning/ui/fragments/ConsideringFragment.kt b/app/src/main/java/com/maialearning/ui/fragments/ConsideringFragment.kt
--- a/app/src/main/java/com/maialearning/ui/fragments/ConsideringFragment.kt	(revision 31e4503244e881dce0096b648a321321172156a4)
+++ b/app/src/main/java/com/maialearning/ui/fragments/ConsideringFragment.kt	(date 1662274565512)
@@ -416,24 +416,24 @@
 
     private fun menuPopUp(position: Int, it: View?) {
 
-        val popupMenu = PopupMenu(requireContext(), it)
-        popupMenu.inflate(R.menu.consider_popup)
-        popupMenu.show()
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
-            popupMenu.setForceShowIcon(true)
-        };
-
-        popupMenu.setOnMenuItemClickListener(PopupMenu.OnMenuItemClickListener { item: MenuItem? ->
-
-            when (item!!.itemId) {
-                R.id.del_coll -> {
-                    confirmPopup(position)
-                }
-            }
-
-            true
-
-        })
+//        val popupMenu = PopupMenu(requireContext(), it)
+//        popupMenu.inflate(R.menu.consider_popup)
+//        popupMenu.show()
+//        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
+//            popupMenu.setForceShowIcon(true)
+//        };
+//
+//        popupMenu.setOnMenuItemClickListener(PopupMenu.OnMenuItemClickListener { item: MenuItem? ->
+//
+//            when (item!!.itemId) {
+//                R.id.del_coll -> {
+//                    confirmPopup(position)
+//                }
+//            }
+//
+//            true
+//
+//        })
     }
 
     private fun confirmPopup(position: Int) {
